<div class="container mar-top-2">
  <h1>Alle Klausuren (<span id="examCount"><%= Exam.all.count %></span>)</h1>
  <h4>Hier findest du alle Klausuren. <%= link_to 'Hier', new_exam_path, class: 'inline-link' %> kannst du eine neue Klausur hochladen.</h4>
  <form class="filter-options">
    <div class="form-row">
      <div class="form-group col-sm-12 col-md-3 col-lg-4">
        <select id="examFilterSubject" class="form-control" data-default-value="Fach...">
          <option>Fach...</option>
          <% @subjects.each do |subject| %>
            <option><%= subject %></option>
          <% end %>
        </select>
      </div>

      <div class="form-group col-sm-12 col-md-3 col-lg-2">
        <select id="examFilterGrade" class="form-control" data-default-value="Stufe...">
          <option>Stufe...</option>
          <% @grades.each do |grade| %>
            <option><%="Stufe #{grade.grade}"%></option>
          <% end %>
        </select>
      </div>

      <div class="form-group col-sm-12 col-md-3 col-lg-2">
        <select id="examFilterYear" class="form-control" data-default-value="Jahr...">
          <option>Jahr...</option>
          <% @years.each do |year| %>
            <option><%= year %></option>
          <% end %>
        </select>
      </div>

      <div class="form-group col-sm-12 col-md-3 col-lg-4">
        <select id="examFilterTeacher" class="form-control" data-default-value="Lehrer...">
          <option>Lehrer...</option>
          <% @teachers.each do |teacher| %>
            <option><%= teacher %></option>
          <% end %>
        </select>
      </div>
    </div>
  </form>

  <div class="exam-list main-list mar-top-2">
    <% @exams.each do |exam| %>
      <%= render 'shared/exam-card', exam: exam %>
    <% end %>
  </div>
  <div id="noResultsMessage" class="hide-message">
    <h3>Keine Ergebnisse f√ºr deine Suche...</h3>
    <h5>Aber <%= link_to 'hier', new_exam_path %> kannst du eine neue Klausur hochladen</h5>
  </div>
</div>

<script>
  subjectFilter = document.getElementById('examFilterSubject');
  yearFilter = document.getElementById('examFilterYear');
  teacherFilter = document.getElementById('examFilterTeacher');
  gradeFilter = document.getElementById('examFilterGrade');

  exams = document.querySelectorAll('.exam-card');
  examCount = document.getElementById('examCount');
  resultCount = Number(examCount.innerText);
  noResultsMessage = document.getElementById('noResultsMessage')

  subjectFilter.addEventListener('input', function(e) {
    exams.forEach((exam) => {
      if(e.target.value != subjectFilter.dataset.defaultValue) {
        if(exam.dataset.subject != e.target.value) {
          exam.classList.add('exam-hide-subject');
        } else {
          exam.classList.remove('exam-hide-subject');
        }
      } else {
        exam.classList.remove('exam-hide-subject');
      }
    });
    updateCount();
  });

  yearFilter.addEventListener('input', function(e) {
    exams.forEach((exam) => {
      if(e.target.value != yearFilter.dataset.defaultValue) {
        if(exam.dataset.year != e.target.value) {
          exam.classList.add('exam-hide-year');
        } else {
          exam.classList.remove('exam-hide-year');
        }
      } else {
        exam.classList.remove('exam-hide-year');
      }
    });
    updateCount();
  });

  teacherFilter.addEventListener('input', function(e) {
    exams.forEach((exam) => {
      if(e.target.value != teacherFilter.dataset.defaultValue) {
        if(exam.dataset.teacher != e.target.value) {
          exam.classList.add('exam-hide-teacher');
        } else {
          exam.classList.remove('exam-hide-teacher');
        }
      } else {
        exam.classList.remove('exam-hide-teacher');
      }
    });
    updateCount();
  });

  gradeFilter.addEventListener('input', function(e) {
    exams.forEach((exam) => {
      if(e.target.value != gradeFilter.dataset.defaultValue) {
        if(exam.dataset.grade != e.target.value) {
          exam.classList.add('exam-hide-grade');
        } else {
          exam.classList.remove('exam-hide-grade');
        }
      } else {
        exam.classList.remove('exam-hide-grade');
      }
    });
    updateCount();
  });

  function updateCount() {
    resultCount = 0;
    for (let i=0; i < exams.length; i++) {
      classList = exams[i].classList;
      if(!classList.value.includes('hide')){
        resultCount += 1;
      }
    }
    console.log(resultCount);
    examCount.innerText = resultCount;
    if(resultCount == 0) {
      noResultsMessage.classList.remove('hide-message');
    } else {
      noResultsMessage.classList.add('hide-message')
    }
  }
</script>
